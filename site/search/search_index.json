{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TP TEST LOGICIEL - GL4","text":"<p>Ce cours comporte 4  s\u00e9ances de travaux pratiques:</p> <ul> <li>TP1: Apprendre les tests unitaires en JavaScript avec Vitest</li> <li>TP2: Test de bout en bout avec Selenium</li> <li>TP3: </li> <li>TP4:</li> </ul>"},{"location":"tp1/","title":"Apprendre les tests unitaires en JavaScript avec Vitest","text":""},{"location":"tp1/#objectifs-du-tp","title":"Objectifs du TP","text":"<ol> <li>Comprendre l'importance des tests unitaires dans le d\u00e9veloppement logiciel.</li> <li>Apprendre \u00e0 \u00e9crire des tests unitaires en JavaScript.</li> <li>Ma\u00eetriser l'utilisation de Vitest pour l'ex\u00e9cution des tests unitaires.</li> </ol>"},{"location":"tp1/#duree-estimee","title":"Dur\u00e9e estim\u00e9e","text":"<p>3 heures</p>"},{"location":"tp1/#plan-du-tp","title":"Plan du TP","text":"<ol> <li> <p>Introduction aux tests unitaires</p> <ul> <li>D\u00e9finition des tests unitaires.</li> <li>Avantages des tests unitaires dans le d\u00e9veloppement logiciel.</li> </ul> </li> <li> <p>Pr\u00e9sentation de Vitest</p> <ul> <li>Pr\u00e9sentation de Vitest : Qu'est-ce que c'est et pourquoi l'utiliser ?</li> <li>Installation de Vitest dans un projet JavaScript.</li> </ul> </li> <li> <p>\u00c9criture de tests unitaires avec Vitest</p> <ul> <li>Structure des tests avec Vitest.</li> <li>\u00c9criture de tests simples pour les fonctions JavaScript.</li> <li>Utilisation des assertions pour v\u00e9rifier les r\u00e9sultats attendus.</li> <li>Gestion des fonctions asynchrones</li> <li>Techniques avanc\u00e9es d'\u00e9criture de tests avec Vitest</li> </ul> </li> <li> <p>Techniques avanc\u00e9es d'\u00e9criture de tests avec Vitest</p> <ul> <li>Utilisation des mocks </li> </ul> </li> </ol>"},{"location":"tp1/#introduction-aux-tests-unitaires","title":"Introduction aux tests unitaires","text":""},{"location":"tp1/#definition-des-tests-unitaires","title":"D\u00e9finition des tests unitaires","text":"<ul> <li>Les tests unitaires sont des proc\u00e9dures pour v\u00e9rifier si une unit\u00e9 de code (fonction, m\u00e9thode, classe) fonctionne correctement.</li> <li>Objectif principal : isoler et tester chaque composant de mani\u00e8re ind\u00e9pendante.</li> </ul>"},{"location":"tp1/#concepts-de-base-des-tests-unitaires","title":"Concepts de base des tests unitaires","text":"<ol> <li> <p>Compr\u00e9hension de l'unit\u00e9 de test</p> <ul> <li>Une unit\u00e9 de test est la plus petite partie testable d'une application.</li> <li>Elle devrait \u00eatre simple, isol\u00e9e et ind\u00e9pendante des autres parties du code.</li> </ul> </li> <li> <p>Principes fondamentaux des tests unitaires</p> <ul> <li>F.I.R.S.T. : Les tests unitaires doivent \u00eatre Fast, Isolated, Repeatable, Self-validating et Timely.</li> <li>Test Driven Development (TDD) : Une approche de d\u00e9veloppement o\u00f9 les tests unitaires sont \u00e9crits avant le code de production.</li> </ul> </li> <li> <p>Diff\u00e9rence entre les tests unitaires et les autres types de tests</p> <ul> <li>Tests d'int\u00e9gration : Testent les interactions entre les diff\u00e9rentes parties d'une application.</li> <li>Tests syst\u00e8me : Testent l'application dans son ensemble pour s'assurer qu'elle fonctionne comme pr\u00e9vu.</li> </ul> </li> <li> <p>Outils couramment utilis\u00e9s pour les tests unitaires</p> <ul> <li>Frameworks de tests : Jest, Mocha, Jasmine, etc.</li> <li>Biblioth\u00e8ques d'assertions : Chai, Assert, etc.</li> <li>Outils de mocking : Sinon, Mockito, etc.</li> </ul> </li> </ol>"},{"location":"tp1/#avantages-des-tests-unitaires-dans-le-developpement-logiciel","title":"Avantages des tests unitaires dans le d\u00e9veloppement logiciel","text":"<ul> <li>R\u00e9duction des bugs : Les tests unitaires permettent de d\u00e9tecter et corriger les erreurs d\u00e8s leur apparition.</li> <li>Facilitation de la maintenance : En fournissant une r\u00e9troaction rapide sur les changements de code, les tests unitaires rendent la maintenance plus efficace.</li> <li>Am\u00e9lioration de la conception : Les tests unitaires encouragent une conception modulaire et une meilleure s\u00e9paration des pr\u00e9occupations.</li> <li>Acc\u00e9l\u00e9ration du d\u00e9veloppement : En automatisant les tests, les d\u00e9veloppeurs gagnent du temps et peuvent se concentrer sur de nouvelles fonctionnalit\u00e9s.</li> </ul>"},{"location":"tp1/#objectifs-des-tests-unitaires","title":"Objectifs des tests unitaires","text":"<ul> <li>Assurer la fonctionnalit\u00e9 attendue de chaque composant individuel.</li> <li>R\u00e9duire les risques lors des modifications ou des ajouts de fonctionnalit\u00e9s.</li> <li>Fournir une documentation vivante du comportement attendu du code.</li> </ul>"},{"location":"tp1/#presentation-de-vitest","title":"Pr\u00e9sentation de Vitest","text":"<ol> <li> <p>Introduction \u00e0 Vitest : qu'est-ce que c'est ?</p> <ul> <li>Vitest est un framework de tests unitaires pour JavaScript.</li> <li>Il offre une syntaxe simple et expressive pour \u00e9crire des tests unitaires.</li> </ul> </li> <li> <p>Raisons d'utiliser Vitest pour les tests unitaires</p> <ul> <li>Facilit\u00e9 d'utilisation : Vitest est facile \u00e0 apprendre et \u00e0 utiliser pour les d\u00e9veloppeurs JavaScript.</li> <li>Performance : Vitest offre des performances \u00e9lev\u00e9es pour l'ex\u00e9cution des tests unitaires.</li> </ul> </li> <li> <p>Caract\u00e9ristiques principales de Vitest</p> <ul> <li>Syntaxe intuitive : Les tests unitaires avec Vitest sont \u00e9crits de mani\u00e8re d\u00e9clarative et facile \u00e0 comprendre.</li> <li>Support des promesses : Vitest prend en charge les tests asynchrones avec des promesses.</li> <li>Comparaison avec Jest, Mocha, Jasmine, etc.</li> <li>Points forts et faiblesses de Vitest par rapport aux autres frameworks.</li> </ul> </li> <li> <p>Installation de Vitest dans un projet JavaScript</p> <p>a. Pr\u00e9requis pour installer Vitest</p> <ul> <li>Node.js install\u00e9 sur le syst\u00e8me</li> <li>Un projet JavaScript existant ou nouvellement cr\u00e9\u00e9</li> </ul> <p>b. Installation de Vitest via npm</p> <pre><code>npm install -D vitest\n</code></pre> <p>c. Configuration de Vitest dans un projet JavaScript</p> <p>Une fois que vous avez install\u00e9 Vitest dans votre projet JavaScript, vous devez le configurer correctement pour qu'il fonctionne efficacement. Voici les \u00e9tapes de configuration :</p> <ul> <li>Configuration initiale de Vitest dans le fichier de configuration du projet.</li> </ul> <p>Dans le fichier package.json ajouter la configuration suivante:             <pre><code>    {\n\"scripts\": {\n    \"test\": \"vitest\"\n}\n}\n</code></pre></p> <ul> <li>Sp\u00e9cification des r\u00e9pertoires de tests et de leur structure. Il est important de sp\u00e9cifier les r\u00e9pertoires o\u00f9 se trouvent vos tests ainsi que leur structure. Vitest suit g\u00e9n\u00e9ralement une convention de structuration des tests pour faciliter l'organisation et l'ex\u00e9cution des tests. Assurez-vous de respecter cette convention pour que Vitest puisse d\u00e9couvrir et ex\u00e9cuter vos tests correctement.</li> </ul> <p>Par exemple, vous pourriez organiser vos tests dans un r\u00e9pertoire tests \u00e0 la racine de votre projet, avec des sous-r\u00e9pertoires pour chaque module ou composant, et des fichiers de test portant le m\u00eame nom que les fichiers qu'ils testent.</p> <pre><code>    project/\n\u251c\u2500\u2500 src/\n\u2502 \u251c\u2500\u2500 module1.js\n\u2502 \u2514\u2500\u2500 module2.js\n\u2514\u2500\u2500 tests/\n\u251c\u2500\u2500 module1.test.js\n\u2514\u2500\u2500 module2.test.js\n</code></pre> </li> </ol>"},{"location":"tp1/#ecriture-de-tests-unitaires-en-javascript-avec-vitest","title":"\u00c9criture de tests unitaires en JavaScript avec Vitest","text":"<p>Dans cette partie, nous allons plonger dans l'\u00e9criture de tests unitaires en JavaScript en utilisant Vitest. Nous allons commencer par comprendre la structure de base des tests avec Vitest, puis nous allons \u00e9crire des tests simples pour des fonctions JavaScript, en utilisant des assertions pour v\u00e9rifier les r\u00e9sultats attendus.</p>"},{"location":"tp1/#structure-des-tests-avec-vitest","title":"Structure des tests avec Vitest","text":"<p>Vitest propose une structure simple et claire pour l'\u00e9criture des tests unitaires. Voici un exemple de structure de test avec Vitest :</p> <pre><code>import { test } from 'vitest';\n\ntest('Nom du test', () =&gt; {\n  // Corps du test\n});\n</code></pre> <p>Dans cet exemple, nous utilisons la fonction test fournie par Vitest pour d\u00e9finir un nouveau test. \u00c0 l'int\u00e9rieur de la fonction test, nous sp\u00e9cifions le nom du test et le corps du test, o\u00f9 nous effectuons nos v\u00e9rifications.</p>"},{"location":"tp1/#ecriture-de-tests-simples","title":"\u00c9criture de tests simples","text":"<p>Voyons maintenant comment \u00e9crire des tests simples pour des fonctions JavaScript. Supposons que nous ayons une fonction add qui additionne deux nombres. Voici comment nous pourrions \u00e9crire un test pour cette fonction :</p> <pre><code>import { test } from 'vitest';\nimport { add } from './math'; // Supposons que 'add' est une fonction export\u00e9e depuis un fichier 'math.js'\n\ntest('Test de la fonction add', () =&gt; {\n  const result = add(2, 3);\n  expect(result).toBe(5);\n});\n</code></pre> <p>Activit\u00e9-1</p> <ol> <li> <p>Cr\u00e9er un nouveau projet TP1 avec votre IDE pr\u00e9f\u00e9r\u00e9</p> </li> <li> <p>Cr\u00e9er un fichier <code>math.js</code> dans lequel ajouter une fonction <code>add</code> qui calcule la somme de deux entiers.</p> </li> <li> <p>Cr\u00e9er un dossier <code>test</code>, sous lequel cr\u00e9er un fichier que vous nommez <code>math.test.js</code>.</p> </li> <li> <p>Suivre les \u00e9tapes mentionn\u00e9es dans la section 2 pour installer Vitest.</p> </li> <li> <p>Modifier le fichier package.json pour ajouter la section \"scripts\", Ajoutez la section \"scripts\" dans votre fichier package.json comme suit :</p> <pre><code>\"scripts\": {\n\"dev\": \"vite\",\n\"build\": \"vite build\",\n\"preview\": \"vite preview\",\n\"test\": \"vitest\"}\n</code></pre> </li> <li> <p>Copier le code ci-dessus pour tester la fonction <code>add</code>.</p> </li> <li> <p>Ex\u00e9cuter le test avec la commande <code>npm run test</code></p> </li> </ol>"},{"location":"tp1/#utilisation-des-assertions-pour-verifier-les-resultats-attendus","title":"Utilisation des assertions pour v\u00e9rifier les r\u00e9sultats attendus.","text":"<p>Vitest utilise des assertions pour v\u00e9rifier si le comportement attendu est respect\u00e9 par le code test\u00e9. Voici quelques-unes des assertions les plus couramment utilis\u00e9es :</p> <ul> <li><code>expect(value).toBe(expected)</code>: V\u00e9rifie si <code>value</code> est strictement \u00e9gal \u00e0 <code>expected</code>.</li> <li><code>expect(value).toEqual(expected)</code>: V\u00e9rifie si <code>value</code> est \u00e9gal \u00e0 <code>expected</code> en effectuant une comparaison en profondeur pour les objets et les tableaux.</li> <li><code>expect(value).toBeTruthy()</code>: V\u00e9rifie si <code>value</code> est \u00e9valu\u00e9 \u00e0 <code>true</code>.</li> <li><code>expect(value).toBeFalsy()</code>: V\u00e9rifie si <code>value</code> est \u00e9valu\u00e9 \u00e0 <code>false</code>.</li> <li><code>expect(value).toContain(expected)</code>: V\u00e9rifie si <code>value</code> contient <code>expected</code> (pour les cha\u00eenes de caract\u00e8res et les tableaux).</li> </ul> <p>Note</p> <p>Visitez ce lien pour plus de d\u00e9tails sur les assertions.</p>"},{"location":"tp1/#exercice-1","title":"Exercice 1","text":""},{"location":"tp1/#objectif","title":"Objectif","text":"<p>\u00c9crire des tests unitaires pour une fonction de manipulation de cha\u00eenes.</p>"},{"location":"tp1/#description","title":"Description","text":"<p>La t\u00e2che consiste \u00e0 \u00e9crire des tests unitaires pour une fonction de manipulation de cha\u00eenes impl\u00e9ment\u00e9e en JavaScript. La fonction prendra une cha\u00eene de caract\u00e8res en entr\u00e9e et effectuera une op\u00e9ration de transformation sur cette cha\u00eene.</p> <p>Activit\u00e9</p> <ol> <li>Impl\u00e9mentez la fonction transformer qui transforme une chaine de caract\u00e8res en Majuscule.</li> <li> <p>\u00c9crivez au moins trois cas de tests unitaires pour la fonction transformer. Assurez-vous de tester les cas suivants :</p> <ul> <li>Une cha\u00eene vide.</li> <li>Une cha\u00eene avec des caract\u00e8res en minuscules.</li> <li>Une cha\u00eene avec des caract\u00e8res sp\u00e9ciaux.</li> </ul> </li> <li> <p>Utilisez diff\u00e9rentes assertions pour v\u00e9rifier si la fonction transformer renvoie la cha\u00eene transform\u00e9e correctement.</p> </li> <li>Assurez-vous que vos tests couvrent tous les cas de figure possibles pour garantir que la fonction de manipulation de cha\u00eenes fonctionne correctement dans diverses situations</li> </ol>"},{"location":"tp1/#exercice-2","title":"Exercice 2","text":""},{"location":"tp1/#objectif_1","title":"Objectif","text":"<p>\u00c9crire des tests unitaires pour une fonction de tri.</p>"},{"location":"tp1/#description_1","title":"Description","text":"<p>La t\u00e2che consiste \u00e0 \u00e9crire des tests unitaires pour une fonction de tri impl\u00e9ment\u00e9e en JavaScript. La fonction de tri prendra un tableau de nombres en entr\u00e9e et triera ces nombres par ordre croissant.</p> <p>Activit\u00e9</p> <ol> <li>Impl\u00e9mentez la fonction trier en JS.</li> <li>Ecrivez au moins 3 cas de test.</li> <li>Utilisez des assertions pour v\u00e9rifier si la fonction trier renvoie le tableau tri\u00e9 correctement.</li> <li>Assurez-vous que vos tests couvrent tous les cas de figure possibles, y compris les tableaux d\u00e9j\u00e0 tri\u00e9s, les tableaux invers\u00e9s, etc.</li> <li>Assurez-vous de tester \u00e9galement les cas limites et les situations d'erreur potentielles, comme les tableaux avec des \u00e9l\u00e9ments non num\u00e9riques.</li> </ol>"},{"location":"tp1/#exercice-3","title":"Exercice 3","text":""},{"location":"tp1/#objectif_2","title":"Objectif","text":"<p>Test au valeurs limites : Boundary testing.</p>"},{"location":"tp1/#description_2","title":"Description","text":"<p>La fonction isPriceInRange(price, min, max) v\u00e9rifie si un prix donn\u00e9 se situe dans une plage donn\u00e9e.</p> <pre><code>export function isPriceInRange(price, min, max) {\n  return price &gt;= min &amp;&amp; price &lt;= max;\n}\n</code></pre> <p>Activit\u00e9</p> <p>\u00c9crivez des cas de test pour cette fonction en couvrant les limites de la plage ainsi que les cas o\u00f9 le prix est en dehors de la plage.</p>"},{"location":"tp1/#gestion-des-fonctions-asynchrones","title":"Gestion des fonctions asynchrones","text":"<p>Les fonctions asynchrones peuvent retourner des promesses ou utiliser des rappels (callbacks) pour indiquer la fin de leur ex\u00e9cution. Lorsque vous testez de telles fonctions, vous devez vous assurer que vos tests attendent la fin de l'ex\u00e9cution de ces fonctions avant de v\u00e9rifier les r\u00e9sultats. Vitest facilite cette attente en vous permettant d'utiliser les mots-cl\u00e9s await ou done pour g\u00e9rer l'asynchronisme dans vos tests.</p>"},{"location":"tp1/#utilisation-dawait","title":"Utilisation d'await","text":"<p>Lorsque vous testez des fonctions asynchrones avec Vitest, vous pouvez utiliser le mot-cl\u00e9 await pour attendre la r\u00e9solution ou le rejet des promesses retourn\u00e9es par ces fonctions. Cela vous permet d'ex\u00e9cuter des assertions une fois que la promesse est r\u00e9solue ou rejet\u00e9e, garantissant ainsi que votre test est ex\u00e9cut\u00e9 dans le bon ordre et que les r\u00e9sultats attendus sont correctement v\u00e9rifi\u00e9s.</p>"},{"location":"tp1/#gestion-des-erreurs","title":"Gestion des erreurs","text":"<p>Les fonctions asynchrones peuvent g\u00e9n\u00e9rer des erreurs pendant leur ex\u00e9cution, et il est important de les g\u00e9rer correctement dans vos tests. Vitest vous permet d'utiliser les blocs try/catch pour capturer et traiter les erreurs potentielles g\u00e9n\u00e9r\u00e9es par les fonctions asynchrones lors de l'ex\u00e9cution de vos tests.</p>"},{"location":"tp1/#attente-explicite","title":"Attente explicite","text":"<p>Dans certains cas, vous devrez peut-\u00eatre attendre un certain d\u00e9lai avant de v\u00e9rifier les r\u00e9sultats d'une fonction asynchrone. Vitest fournit des m\u00e9thodes pour g\u00e9rer cette attente explicite, comme setTimeout ou setImmediate, pour s'assurer que votre test donne suffisamment de temps \u00e0 la fonction asynchrone pour terminer son ex\u00e9cution avant de proc\u00e9der \u00e0 la v\u00e9rification.</p>"},{"location":"tp1/#exemple","title":"Exemple","text":"<p>Supposons que nous avons une fonction asynchrone fetchData() qui effectue une requ\u00eate HTTP pour r\u00e9cup\u00e9rer des donn\u00e9es d'un serveur distant. Nous voulons tester cette fonction pour nous assurer qu'elle renvoie les donn\u00e9es attendues.</p> <pre><code>export async function fetchData() {\n  const response = await fetch('https://api.example.com/data');\n  if (!response.ok) {\n    throw new Error('Failed to fetch data');\n  }\n  const data = await response.json();\n  return data;\n}\n</code></pre> <p>Voici comment nous pouvons \u00e9crire un test pour cette fonction avec Vitest :</p> <p><pre><code>import { fetchData } from './fetchData'; // Import de la fonction \u00e0 tester\n\ndescribe('fetchData()', () =&gt; {\n  it('should fetch data from the server', async () =&gt; {\n    try {\n      const data = await fetchData(); // Appel de la fonction asynchrone\n      // V\u00e9rification des r\u00e9sultats attendus\n      expect(data).toBeDefined(); // On s'assure que les donn\u00e9es ont \u00e9t\u00e9 renvoy\u00e9es\n      expect(Array.isArray(data)).toBe(true); // On v\u00e9rifie que les donn\u00e9es renvoy\u00e9es sont un tableau\n      // Ajoutez d'autres assertions selon les donn\u00e9es attendues\n    } catch (error) {\n      // Si une erreur se produit pendant l'ex\u00e9cution de la fonction asynchrone\n      // On signale le test comme \u00e9chou\u00e9\n      fail('Should not throw any error');\n    }\n  });\n});\n</code></pre> Dans cet exemple :</p> <p>Nous utilisons async dans la fonction de test pour indiquer que le test est asynchrone et qu'il utilise await pour attendre la r\u00e9solution de la promesse retourn\u00e9e par fetchData(). Nous appelons la fonction fetchData() \u00e0 l'int\u00e9rieur du bloc try/catch pour capturer toute erreur potentielle qui pourrait survenir lors de son ex\u00e9cution. Dans le bloc try, nous effectuons des assertions sur les donn\u00e9es renvoy\u00e9es par la fonction fetchData() pour nous assurer qu'elles correspondent \u00e0 ce que nous attendons. Si une erreur survient pendant l'ex\u00e9cution de la fonction asynchrone (par exemple, une erreur de r\u00e9seau ou une erreur de syntaxe), elle sera captur\u00e9e dans le bloc catch et le test sera signal\u00e9 comme un \u00e9chec en utilisant fail().</p>"},{"location":"tp1/#exercice","title":"Exercice","text":""},{"location":"tp1/#objectif_3","title":"Objectif","text":"<p>Impl\u00e9menter un test pour une fonction asynchrone qui r\u00e9cup\u00e8re des donn\u00e9es d'une API.</p>"},{"location":"tp1/#description_3","title":"Description","text":"<p>Nous avons une fonction asynchrone appel\u00e9e fetchRandomUser() qui r\u00e9cup\u00e8re les donn\u00e9es d'un utilisateur al\u00e9atoire \u00e0 partir de l'API \"Random User Generator\". L'objectif de l'exercice est d'\u00e9crire un test pour cette fonction pour v\u00e9rifier si elle renvoie les donn\u00e9es attendues de mani\u00e8re asynchrone. <pre><code>export async function fetchRandomUser() {\n  const response = await fetch('https://randomuser.me/api/');\n  if (!response.ok) {\n    throw new Error('Failed to fetch random user');\n  }\n  const data = await response.json();\n  return data.results[0]; // Renvoie les informations sur le premier utilisateur dans la liste\n}\n</code></pre></p> <p>Activit\u00e9</p> <p>1.Comprendre la fonction \u00e0 tester :</p> <p>La fonction fetchRandomUser() utilise l'API \"Random User Generator\" pour r\u00e9cup\u00e9rer les donn\u00e9es d'un utilisateur al\u00e9atoire. Elle renvoie un objet JSON contenant des informations sur cet utilisateur.</p> <p>2.\u00c9crire le test :</p> <p>Utilisez Vitest pour \u00e9crire un test pour la fonction fetchRandomUser(). Assurez-vous d'attendre de mani\u00e8re asynchrone la r\u00e9solution de la promesse retourn\u00e9e par la fonction. V\u00e9rifiez que les donn\u00e9es renvoy\u00e9es sont bien un objet JSON contenant les informations sur l'utilisateur.</p>"},{"location":"tp1/#couverture-de-code","title":"Couverture de code","text":"<p>Pour la couverture de code, c\u2019est-\u00e0-dire la v\u00e9rification du taux de code couvert par les tests unitaires \u2013 un indicateur de qualit\u00e9 de logiciel de plus en plus pr\u00e9sent dans les projets \u2013 il suffit d\u2019ajouter l\u2019option --coverage \u00e0 l\u2019appel du test, par exemple dans votre fichier package.json :</p> <pre><code>    \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview\",\n    \"test:coverage\": \"vitest --coverage\"}\n</code></pre> <p>Ensuite, vous pouvez lancer la couverture de code avec : npm run test:coverage</p> <p></p>"},{"location":"tp1/#travail-a-rendre","title":"Travail \u00e0 rendre","text":"<p>Exercice</p> <p>Choisir un projet, qu'il soit personnel ou open-source, puis cr\u00e9ez au moins trois tests unitaires pour ce projet. Ensuite, ex\u00e9cuter ces tests en incluant le calcul de la couverture de code.</p>"},{"location":"tp2/","title":"Test de bout en bout avec Selenium","text":""},{"location":"tp2/#objectifs-du-tp","title":"Objectifs du TP","text":"<ol> <li>Comprendre l'importance des tests de bout en bout le d\u00e9veloppement logiciel.</li> <li>Apprendre \u00e0 utiliser Selenium IDE pour l'automatisation des tests.</li> <li>Cr\u00e9er et ex\u00e9cuter des tests sur des applications web.</li> </ol>"},{"location":"tp2/#duree-estimee","title":"Dur\u00e9e estim\u00e9e","text":"<p>3 heures</p>"},{"location":"tp2/#plan-du-tp","title":"Plan du TP","text":"<ol> <li> <p>Introduction aux tests de bout en bout ( end to end testing E2E)</p> </li> <li> <p>Pr\u00e9sentation de Selenium</p> <ul> <li>Selenium IDE : qu'est-ce que c'est et comment \u00e7a fonctionne.</li> <li>Pr\u00e9sentation de l'interface utilisateur de Selenium IDE</li> <li>Installation de Selenium IDE.</li> </ul> </li> <li> <p>Cr\u00e9ation de tests simples</p> </li> <li> <p>Analyse et d\u00e9bogage des tests</p> </li> </ol>"},{"location":"tp2/#introduction-aux-tests-de-bout-en-bout","title":"Introduction aux tests de bout en bout","text":"<p>Les tests de bout en bout sont une approche de test logiciel qui vise \u00e0 v\u00e9rifier le bon fonctionnement d'une application dans son ensemble, en simulant le parcours complet de l'utilisateur, de l'interface utilisateur \u00e0 la base de donn\u00e9es. Ces tests reproduisent les actions r\u00e9elles que les utilisateurs effectueraient, en s'assurant que toutes les parties de l'application fonctionnent correctement ensemble.</p> <ol> <li> <p>Objectif des tests de bout en bout :</p> <p>Les tests E2E visent \u00e0 garantir que toutes les fonctionnalit\u00e9s d'une application fonctionnent correctement ensemble, de mani\u00e8re int\u00e9gr\u00e9e. Ils permettent de valider le flux complet de l'application, en testant chaque \u00e9tape du processus utilisateur, de l'interaction avec l'interface utilisateur \u00e0 la manipulation des donn\u00e9es dans la base de donn\u00e9es.</p> </li> <li> <p>Port\u00e9e des tests de bout en bout :</p> <p>Les tests de bout en bout couvrent l'ensemble de l'application, y compris l'interface utilisateur, les interactions avec les composants backend, les services, les bases de donn\u00e9es, etc. Ils sont g\u00e9n\u00e9ralement r\u00e9alis\u00e9s dans un environnement similaire \u00e0 celui de la production pour garantir une validation r\u00e9aliste du comportement de l'application.</p> </li> <li> <p>Outils pour les tests de bout en bout :</p> <p>Plusieurs outils sont disponibles pour automatiser les tests de bout en bout. Parmi les plus populaires figurent Selenium, Puppeteer, Cypress, TestCafe, etc. Ces outils offrent des fonctionnalit\u00e9s pour simuler les interactions utilisateur sur le navigateur, effectuer des assertions sur les \u00e9l\u00e9ments de l'interface utilisateur et ex\u00e9cuter des tests dans un environnement contr\u00f4l\u00e9.</p> </li> <li> <p>Avantages des tests de bout en bout :</p> <ul> <li> <p>D\u00e9tection pr\u00e9coce des probl\u00e8mes : Les tests E2E permettent de d\u00e9tecter les probl\u00e8mes d'int\u00e9gration entre les diff\u00e9rents composants de l'application d\u00e8s les premiers stades du d\u00e9veloppement.</p> </li> <li> <p>Validation compl\u00e8te de l'application : Ils garantissent que toutes les fonctionnalit\u00e9s de l'application fonctionnent correctement ensemble, offrant ainsi une meilleure qualit\u00e9 globale.</p> </li> <li>Automatisation des sc\u00e9narios complexes : Les tests E2E permettent d'automatiser des sc\u00e9narios utilisateur complexes, r\u00e9duisant ainsi le temps n\u00e9cessaire pour effectuer des tests manuels r\u00e9p\u00e9titifs.</li> </ul> </li> </ol>"},{"location":"tp2/#presentation-de-selenium","title":"Pr\u00e9sentation de Selenium","text":"<ol> <li>Introduction \u00e0 Selenium : qu'est-ce que c'est ?</li> </ol> <p>Selenium est un outil de test automatis\u00e9 largement utilis\u00e9 pour automatiser les tests fonctionnels de sites Web. Il permet aux d\u00e9veloppeurs et aux testeurs de cr\u00e9er des scripts de test dans divers langages de programmation tels que Java, Python, C#, etc., pour simuler les interactions utilisateur sur un navigateur web.</p> <ol> <li> <p>Selenium IDE : qu'est-ce que c'est et comment \u00e7a fonctionne.</p> <ul> <li>Pr\u00e9sentation de Selenium IDE</li> </ul> </li> </ol> <p>Selenium IDE est un environnement de d\u00e9veloppement int\u00e9gr\u00e9 (IDE) pour Selenium, un ensemble d'outils d'automatisation de tests largement utilis\u00e9s dans le domaine du d\u00e9veloppement logiciel. Con\u00e7u sp\u00e9cifiquement pour les applications web, Selenium IDE permet aux testeurs et aux d\u00e9veloppeurs de cr\u00e9er, de modifier et d'ex\u00e9cuter des tests automatis\u00e9s de mani\u00e8re intuitive et efficace. Avec Selenium IDE, les utilisateurs peuvent enregistrer des interactions utilisateur, telles que les clics de souris, la saisie de texte et la navigation sur les pages web, et g\u00e9n\u00e9rer du code de test automatis\u00e9 qui peut \u00eatre ex\u00e9cut\u00e9 pour v\u00e9rifier le bon fonctionnement de l'application web sous test.</p> <ul> <li>Fonctionnement de Selenium IDE</li> </ul> <p>Selenium IDE fonctionne comme une extension de navigateur pour Google Chrome et Mozilla Firefox. Une fois install\u00e9 dans le navigateur, Selenium IDE offre une interface conviviale qui permet aux utilisateurs d'enregistrer des sc\u00e9narios de test en effectuant des actions directement dans le navigateur. Par exemple, un testeur peut ouvrir une page web, cliquer sur diff\u00e9rents \u00e9l\u00e9ments de l'interface utilisateur, saisir du texte dans les champs de formulaire, soumettre des formulaires, etc. Pendant l'enregistrement, Selenium IDE capture ces interactions et g\u00e9n\u00e8re automatiquement du code de test bas\u00e9 sur les actions de l'utilisateur. Une fois l'enregistrement termin\u00e9, les utilisateurs peuvent modifier le code de test g\u00e9n\u00e9r\u00e9 pour l'adapter \u00e0 leurs besoins sp\u00e9cifiques, en ajoutant des validations, des boucles, des conditions, etc. Enfin, les tests peuvent \u00eatre ex\u00e9cut\u00e9s \u00e0 tout moment \u00e0 l'aide de Selenium IDE, ce qui permet de v\u00e9rifier automatiquement le bon fonctionnement de l'application web sous test.</p> <ol> <li>Pr\u00e9sentation de l'interface utilisateur de Selenium IDE</li> </ol> <p>Selenium IDE se pr\u00e9sente comme suit : </p> <ol> <li>URL racine de l'interface web \u00e0 tester</li> <li>Barre d'outils de d\u00e9bug (point de d\u00e9part, point d'arr\u00eat, lecture pas \u00e0 pas, ...)</li> <li>Liste des suites de tests ouvertes</li> <li>Fonctions appel\u00e9es et param\u00e8tres</li> <li>Bouton d'enregistrement des interractions de l'utilisateur. En appuyant dessus, toutes les actions de l'utilisateur dans l'interface web seront automatiquement enregistr\u00e9es et apparaitront dans l'encadr\u00e9 n\u00b04</li> <li>Log(log des fonctions appel\u00e9es / R\u00e9f\u00e9rence(documentation des fonctions) / UI-Element (rarement rempli contient des informations en plus de l'onglet r\u00e9f\u00e9rence) / Combinaison</li> <li>Onglet Table/Source. (actuellement visible : Table). L'onglet Source est d\u00e9taill\u00e9 plus bas.</li> </ol> <p>Nous pouvons constater que le choix de la cible se fait de mani\u00e8re intelligente : </p> <p>Si nous enregistrons un texte avec le bouton d'enregistrement, alors selenium IDE nous propose tout les choix possible pour l'identification du champs : son ID, son name attribute, son Xpath, etc...</p> <ol> <li>Installation de Selenium IDE</li> </ol> <p>Pour installer Selenium IDE sur Google Chrome, ajoutez l'extension de Selenium IDE dans le navigateur web. Suivez les \u00e9tapes ci-dessous :</p> <ul> <li>Ouvrez le navigateur Google Chrome sur votre syst\u00e8me, puis rendez-vous sur le lien. Cela vous dirigera vers le Chrome Web Store o\u00f9 vous devrez ajouter l'extension de Selenium IDE \u00e0 votre navigateur Chrome. Cliquez sur le bouton \"Ajouter \u00e0 Chrome\".</li> </ul> <p></p> <ul> <li> <p>Lorsque vous cliquez sur le bouton \"Ajouter \u00e0 Chrome\", une bo\u00eete de dialogue d'avertissement appara\u00eetra \u00e0 l'\u00e9cran. Cliquez simplement sur le bouton \"Ajouter l'extension\" pour finalement ajouter l'extension \u00e0 votre navigateur Chrome.</p> </li> <li> <p>Maintenant, vous devez cliquer sur l'ic\u00f4ne de l'extension dans le navigateur Google Chrome, situ\u00e9e dans le coin sup\u00e9rieur droit. Une liste d'extensions appara\u00eetra \u00e0 l'\u00e9cran, \u00e9pinglez l'extension Selenium IDE.</p> </li> </ul> <p></p> <ul> <li>Maintenant, cliquez sur Selenium IDE pour commencer \u00e0 travailler avec Selenium IDE. Vous pouvez d\u00e9sormais enregistrer un nouveau test dans un nouveau projet, ouvrir un projet existant et \u00e9galement cr\u00e9er un nouveau projet.</li> </ul> <p></p>"},{"location":"tp2/#creation-des-testes-simples","title":"Cr\u00e9ation des testes simples","text":"<p>Nous allons effectuer un test simple de bout en bout avec Selenium IDE. Pour cel\u00e0 suivez les \u00e9tapes suivantes : </p> <ol> <li> <p>Ouvrez l'extension Selenium IDE install\u00e9e pour acc\u00e9der \u00e0 son interface par d\u00e9faut. Ensuite, cliquez sur \"Cr\u00e9er un nouveau projet\".</p> <p></p> </li> <li> <p>La prochaine \u00e9tape consiste \u00e0 attribuer un nom \u00e0 votre projet. Vous pouvez donner n'importe quel nom qui refl\u00e8te l'identit\u00e9 de votre projet.</p> <p></p> </li> <li> <p>Pour commencer le processus de cr\u00e9ation d'un cas de test pour votre site web, ajoutez un nouveau cas de test en cliquant sur le symbole \u2018+\u2019 dans l'onglet \"Tests\" et nommez votre test.</p> <p></p> </li> <li> <p>Une URL de base de lecture est n\u00e9cessaire pour ex\u00e9cuter votre cas de test ; votre cas de test commencera \u00e0 partir de l'URL que vous fournirez. Ajoutez une URL de base de lecture, par exemple https://www.geeksforgeeks.org/, dans l'onglet tel qu'illustr\u00e9 dans l'image ci-dessous.</p> <p></p> </li> <li> <p>Pour commencer l'enregistrement de votre cas de test, cliquez sur le bouton d'enregistrement disponible. Il capturera chaque interaction avec l'application web en temps r\u00e9el.</p> <p></p> </li> <li> <p>Visitez le site web que vous souhaitez tester et effectuez les actions sp\u00e9cifiques que vous souhaitez int\u00e9grer dans votre cas de test. Selenium IDE enregistrera ces actions en tant qu'\u00e9tapes dans votre cas de test.</p> </li> <li> <p>Une fois que vous avez termin\u00e9 vos interactions, cliquez sur le bouton \"Arr\u00eater l'enregistrement\" dans Selenium IDE.</p> <p></p> </li> <li> <p>Cliquez sur le bouton \"Ex\u00e9cuter le test actuel\" pour ex\u00e9cuter votre cas de test ; il rejouera les actions que vous avez effectu\u00e9es. Observez les interactions et vous pouvez identifier tout probl\u00e8me lors de l'ex\u00e9cution du test.</p> <p></p> </li> <li> <p>Vous pouvez facilement \u00e9valuer le r\u00e9sum\u00e9 de votre cas de test en v\u00e9rifiant la section \"log\" ci-dessous, ce qui vous aidera \u00e0 identifier si des \u00e9tapes ont \u00e9chou\u00e9 ou r\u00e9ussi.</p> <p></p> </li> <li> <p>Cliquez sur les trois points situ\u00e9s sur le c\u00f4t\u00e9 droit de votre test, puis s\u00e9lectionnez \"Exporter\" pour exporter votre cas de test dans le langage de votre choix, afin de pouvoir l'utiliser avec d'autres outils et cadres Selenium pour diverses fins de test et d'automatisation.</p> <p></p> <p>Il vous proposera des options pour exporter votre cas de test dans les langages donn\u00e9s. Vous pouvez choisir n'importe quel langage parmi ceux propos\u00e9s pour exporter votre cas de test.</p> <p></p> </li> </ol>"},{"location":"tp2/#travail-a-rendre","title":"Travail \u00e0 rendre","text":"<p>Exercice</p> <p>L'objectif est d'utiliser Selenium IDE pour automatiser le test de la page suivante</p> <ol> <li> <p>Ouvrez Selenium IDE.</p> </li> <li> <p>Cr\u00e9ez un nouveau test dans Selenium IDE.</p> </li> <li> <p>Enregistrez un nouveau sc\u00e9nario de test en utilisant l'outil d'enregistrement.</p> </li> <li> <p>Ex\u00e9cutez le test pour v\u00e9rifier son bon fonctionnement initial.</p> </li> <li> <p>Modifiez le script pour changer la valeur du nom d'utilisateur enregistr\u00e9 dans l'enregistrement pr\u00e9c\u00e9dent.</p> </li> <li> <p>Ajoutez une nouvelle commande \"Assert Text\" pour v\u00e9rifier que le message affich\u00e9 est correct apr\u00e8s avoir cliqu\u00e9 sur le bouton \"Bonjour\".</p> </li> <li> <p>Ex\u00e9cutez le script de test pour deux cas : un cas o\u00f9 l'assertion r\u00e9ussit et un cas o\u00f9 l'assertion \u00e9choue, en modifiant le nom d'utilisateur pour chaque cas.</p> </li> <li> <p>Analysez les r\u00e9sultats et identifiez les \u00e9carts entre les r\u00e9sultats attendus et r\u00e9els.</p> </li> <li> <p>Faites des ajustements au script si n\u00e9cessaire pour corriger les erreurs ou les \u00e9checs de l'assertion.</p> </li> </ol> <p>Exercice</p> <p>L'objectif est d'utiliser Selenium IDE pour automatiser le test de la calculatrice suivante</p> <ol> <li>Utilisez Selenium IDE pour enregistrer une s\u00e9rie d'actions qui testent diff\u00e9rentes fonctionnalit\u00e9s de la calculatrice, en vous assurant de couvrir les cas suivants :</li> <li>Testez l'addition de deux nombres.</li> <li>Testez la soustraction de deux nombres.</li> <li>Testez la multiplication de deux nombres.</li> <li>Testez la division de deux nombres.</li> <li>Testez la division par z\u00e9ro et assurez-vous que le message d'erreur appropri\u00e9 est affich\u00e9 le cas \u00e9ch\u00e9ant.</li> <li>Testez des cas de valeurs nulles ou vides dans les champs de saisie.</li> <li>Ajoutez des assertions pour v\u00e9rifier que les r\u00e9sultats affich\u00e9s sont corrects.</li> <li>Organisez vos tests en suites logiques pour une meilleure gestion.</li> <li>Ex\u00e9cutez vos tests pour v\u00e9rifier qu'ils passent tous avec succ\u00e8s.</li> </ol> <p>Exercice</p> <ol> <li> <p>Acc\u00e9dez au site demoblaze dans votre navigateur. Ce site propose une gamme de produits fictifs pour simuler un magasin en ligne.</p> </li> <li> <p>Utilisez Selenium IDE pour enregistrer une s\u00e9rie d'actions qui testent diff\u00e9rentes fonctionnalit\u00e9s du site, en vous assurant de couvrir les cas suivants :</p> </li> <li>Parcourez les diff\u00e9rentes cat\u00e9gories de produits disponibles sur le site.</li> <li>Ajoutez un produit au panier.</li> <li>Acc\u00e9dez au panier, v\u00e9rifiez les articles ajout\u00e9s et supprimez-en si n\u00e9cessaire.</li> <li>V\u00e9rifiez la confirmation de la commande apr\u00e8s le paiement.   </li> <li>Testez la fonction de recherche pour trouver un produit sp\u00e9cifique.</li> <li>Explorez les pages suppl\u00e9mentaires telles que la page d'accueil, la page \"\u00c0 propos\", etc.</li> <li>Utilisez des variables pour stocker des donn\u00e9es telles que les noms de produits, les adresses de livraison, etc., afin de rendre vos tests plus dynamiques et r\u00e9utilisables.</li> <li>Ajoutez des assertions pour v\u00e9rifier que les actions effectu\u00e9es ont produit les r\u00e9sultats attendus.</li> <li>Ex\u00e9cutez vos tests pour v\u00e9rifier qu'ils passent tous avec succ\u00e8s.</li> </ol>"}]}